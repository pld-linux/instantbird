--- mozilla/configure.in	2009-07-29 02:01:16.830297512 +0300
+++ mozilla/configure.in	2009-07-30 02:29:31.194612978 +0300
@@ -62,6 +62,9 @@
 
 AC_PREREQ(2.13)
 AC_INIT(config/config.mk)
+dnl MOZ_READ_MOZCONFIG([.])
+_AUTOCONF_TOOLS_DIR="`dirname [$]0`/build/autoconf"
+. `dirname [$]0`/build/autoconf/mozconfig2configure
 AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
 AC_CANONICAL_SYSTEM
 TARGET_CPU="${target_cpu}"
@@ -283,7 +286,8 @@
 
     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcc_works=1
+    AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
 
     CC="$HOST_CXX"
@@ -291,7 +295,8 @@
 
     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
     AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
+	[ac_cv_prog_hostcxx_works=1
+    AC_MSG_RESULT([yes])],
 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
     
     CC=$_SAVE_CC
@@ -451,17 +456,17 @@
         # Make sure compilers are valid
         CFLAGS="$CFLAGS -TC -nologo"
         CXXFLAGS="$CXXFLAGS -TP -nologo"
-        AC_LANG_SAVE
-        AC_LANG_C
+        AC_LANG_PUSH([C])
         AC_TRY_COMPILE([#include <stdio.h>],
             [ printf("Hello World\n"); ],,
             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
+        AC_LANG_POP
 
-        AC_LANG_CPLUSPLUS
+        AC_LANG_PUSH([C++])
         AC_TRY_COMPILE([#include <new.h>],
             [ unsigned *test = new unsigned(42); ],,
             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
-        AC_LANG_RESTORE
+        AC_LANG_POP
         
         changequote(,)
         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
@@ -863,14 +868,13 @@
     fi
   fi
 
-  AC_LANG_SAVE
   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
-  AC_LANG_CPLUSPLUS
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([#include <new>
                  int main() { return 0; }],
    result=yes,
    result=no)
-  AC_LANG_RESTORE
+  AC_LANG_POP
   AC_MSG_RESULT($result)
 
   if test "$result" = "no" ; then
@@ -930,6 +934,9 @@
 dnl ========================================================
 dnl set the defaults first
 dnl ========================================================
+m4_pattern_allow([AS_BIN])
+m4_pattern_allow([AS_DASH_C_FLAG])
+m4_pattern_allow([AS_PERL])
 AS_BIN=$AS
 AR_FLAGS='cr $@'
 AR_LIST='$(AR) t'
@@ -1371,8 +1378,7 @@
     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
                    ac_has_wno_invalid_offsetof,
         [
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             _SAVE_CXXFLAGS="$CXXFLAGS"
             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
             AC_TRY_COMPILE([],
@@ -1380,7 +1386,7 @@
                            ac_has_wno_invalid_offsetof="yes",
                            ac_has_wno_invalid_offsetof="no")
             CXXFLAGS="$_SAVE_CXXFLAGS"
-            AC_LANG_RESTORE
+            AC_LANG_POP
         ])
     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
@@ -1443,8 +1449,8 @@
 dnl test that the macros actually work:
 AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
 AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
- [AC_LANG_SAVE
-  AC_LANG_C
+ [
+  AC_LANG_PUSH([C])
   ac_cv_static_assertion_macros_work="yes"
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
@@ -1454,7 +1460,8 @@
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_CPLUSPLUS
+  AC_LANG_POP
+  AC_LANG_PUSH([C++])
   AC_TRY_COMPILE([$configure_static_assert_macros],
                  [CONFIGURE_STATIC_ASSERT(1)],
                  ,
@@ -1463,7 +1470,7 @@
                  [CONFIGURE_STATIC_ASSERT(0)],
                  ac_cv_static_assertion_macros_work="no",
                  )
-  AC_LANG_RESTORE
+  AC_LANG_POP
  ])
 AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
 if test "$ac_cv_static_assertion_macros_work" = "no"; then
@@ -1475,8 +1482,7 @@
 dnl Checking for 64-bit OS
 dnl ========================================================
 if test "$COMPILE_ENVIRONMENT"; then
-AC_LANG_SAVE
-AC_LANG_C
+AC_LANG_PUSH([C])
 AC_MSG_CHECKING(for 64-bit OS)
 AC_TRY_COMPILE([$configure_static_assert_macros],
                [CONFIGURE_STATIC_ASSERT(sizeof(long) == 8)],
@@ -1487,7 +1493,7 @@
     HAVE_64BIT_OS=1
 fi
 AC_SUBST(HAVE_64BIT_OS)
-AC_LANG_RESTORE
+AC_LANG_POP
 fi # COMPILE_ENVIRONMENT
 
 dnl ========================================================
@@ -1618,8 +1624,7 @@
         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
         if test "$COMPILE_ENVIRONMENT"; then
-            AC_LANG_SAVE
-            AC_LANG_CPLUSPLUS
+            AC_LANG_PUSH([C++])
             AC_MSG_CHECKING([for VisualAge C++ compiler version >= 6.0.0.3])
             AC_TRY_COMPILE([],
                 [#if (__IBMCPP__ < 600)
@@ -1632,7 +1637,7 @@
             else
                 AC_MSG_RESULT([yes])    
             fi
-            AC_LANG_RESTORE
+            AC_LANG_POP
             TARGET_COMPILER_ABI="ibmc"
             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
@@ -2184,10 +2189,9 @@
     *)
         AC_CHECK_HEADERS(mmintrin.h oleacc.idl)
 
-        AC_LANG_SAVE
-        AC_LANG_CPLUSPLUS
+        AC_LANG_PUSH([C++])
         AC_CHECK_HEADERS(atlbase.h wpcapi.h)
-        AC_LANG_RESTORE
+        AC_LANG_POP
         ;;
     esac
 
@@ -2459,8 +2463,7 @@
         CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
         CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
        AC_MSG_CHECKING([for Forte compiler version >= WS6U2])
-       AC_LANG_SAVE
-       AC_LANG_CPLUSPLUS
+       AC_LANG_PUSH([C++])
        AC_TRY_COMPILE([],
            [#if (__SUNPRO_CC < 0x530)
            #error "Denied"
@@ -2473,7 +2476,7 @@
             _res="yes"
         fi
         AC_MSG_RESULT([$_res])
-        AC_LANG_RESTORE
+        AC_LANG_POP
     else
        ASFLAGS="$ASFLAGS -fPIC"
        DSO_LDOPTS='-G'
@@ -2596,7 +2599,7 @@
 if test -z "$SKIP_COMPILER_CHECKS"; then
 dnl Checks for typedefs, structures, and compiler characteristics.
 dnl ========================================================
-AC_LANG_C
+AC_LANG_PUSH([C])
 AC_HEADER_STDC
 AC_C_CONST
 AC_TYPE_MODE_T
@@ -2711,11 +2714,12 @@
 else
   AC_MSG_RESULT(no)
 fi
+AC_LANG_POP
 
 dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
 dnl are defined when compiling C++ but not C.  Since the result of this
 dnl test is used only in C++, do it in C++.
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 AC_MSG_CHECKING(for uname.domainname)
 AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
@@ -2746,8 +2750,7 @@
 else
     AC_MSG_RESULT(no)
 fi
-
-AC_LANG_C
+AC_LANG_POP
 
 dnl Check for usable wchar_t (2 bytes, unsigned)
 dnl (we really don't need the unsignedness check anymore)
@@ -2771,8 +2774,7 @@
 dnl only have short-wchar support for c++.
 dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
 
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     _SAVE_CXXFLAGS=$CXXFLAGS
     CXXFLAGS="$CXXFLAGS -fshort-wchar"
 
@@ -2792,7 +2794,7 @@
     else    
         CXXFLAGS=$_SAVE_CXXFLAGS
     fi
-    AC_LANG_RESTORE
+    AC_LANG_POP
 fi
 
 dnl Check for .hidden assembler directive and visibility attribute.
@@ -2911,10 +2913,12 @@
     ;;
 *)
     AC_CHECK_LIB(m, atan)
-    AC_CHECK_LIB(dl, dlopen,
-    AC_CHECK_HEADER(dlfcn.h, 
-        LIBS="-ldl $LIBS"
-        AC_DEFINE(HAVE_LIBDL)))
+    AC_CHECK_LIB(dl, dlopen, [
+        AC_CHECK_HEADER(dlfcn.h, [
+            LIBS="-ldl $LIBS"
+            AC_DEFINE(HAVE_LIBDL)
+        ])
+    ])
     ;;
 esac
 
@@ -2951,11 +2955,11 @@
 
 dnl Check whether the compiler supports the new-style C++ standard
 dnl library headers (i.e. <new>) or needs the old "new.h"
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 NEW_H=new.h
 AC_CHECK_HEADER(new, [NEW_H=new])
 AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
-AC_LANG_C
+AC_LANG_POP
 
 AC_ARG_ENABLE(dtrace,
               [  --enable-dtrace         build with dtrace support if available (default=no)],
@@ -3338,8 +3342,7 @@
 dnl check for wcrtomb/mbrtowc
 dnl =======================================================================
 if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
-AC_LANG_SAVE
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(for wcrtomb,
     ac_cv_have_wcrtomb,
     [AC_TRY_LINK([#include <wchar.h>],
@@ -3358,7 +3361,7 @@
 if test "$ac_cv_have_mbrtowc" = "yes"; then
     AC_DEFINE(HAVE_MBRTOWC)
 fi
-AC_LANG_RESTORE
+AC_LANG_POP
 fi
 
 AC_CACHE_CHECK(
@@ -3383,7 +3386,7 @@
 dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
 fi
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 AC_CACHE_CHECK(
     [for gnu_get_libc_version()],
     ac_cv_func_gnu_get_libc_version,
@@ -3461,7 +3464,7 @@
 
 AM_LANGINFO_CODESET
 
-AC_LANG_C
+AC_LANG_POP
 
 dnl **********************
 dnl *** va_copy checks ***
@@ -3624,7 +3627,7 @@
 dnl ========================================================
 dnl Put your C++ language/feature checks below
 dnl ========================================================
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 HAVE_GCC3_ABI=
 if test "$GNU_CC"; then
@@ -3939,7 +3942,7 @@
 
 
 dnl End of C++ language/feature checks
-AC_LANG_C
+AC_LANG_POP
 
 dnl ========================================================
 dnl =  Internationalization checks
@@ -6561,10 +6564,9 @@
     MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS= )
 if test "$COMPILE_ENVIRONMENT"; then
 if test "$MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__builtin_vec_new __builtin_vec_delete __builtin_new __builtin_delete __pure_virtual)
-    AC_LANG_RESTORE
+    AC_LANG_POP
     AC_DEFINE(MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS)
 fi
 fi # COMPILE_ENVIRONMENT
@@ -6681,10 +6683,9 @@
 dnl = Support for demangling undefined symbols
 dnl ========================================================
 if test -z "$SKIP_LIBRARY_CHECKS"; then
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH([C++])
     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
-    AC_LANG_RESTORE
+    AC_LANG_POP
 fi
 
 # Demangle only for debug or trace-malloc builds
@@ -6919,7 +6920,7 @@
 AC_SUBST(PROFILE_USE_CFLAGS)
 AC_SUBST(PROFILE_USE_LDFLAGS)
 
-AC_LANG_CPLUSPLUS
+AC_LANG_PUSH([C++])
 
 dnl ========================================================
 dnl Test for -pedantic bustage
@@ -7060,7 +7061,7 @@
 else
     AC_DEFINE(CPP_THROW_NEW, [throw()])
 fi
-AC_LANG_C
+AC_LANG_POP
 
 dnl ========================================================
 dnl =
@@ -8307,7 +8308,7 @@
     if test -n "$USE_ARM_KUSER"; then
         ac_configure_args="$ac_configure_args --with-arm-kuser"
     fi
-    AC_OUTPUT_SUBDIRS(nsprpub)
+    AC_CONFIG_SUBDIRS(nsprpub)
     ac_configure_args="$_SUBDIR_CONFIG_ARGS"
 fi
 
@@ -8338,7 +8339,7 @@
 if test "$MOZ_MEMORY"; then
    ac_configure_args="$ac_configure_args --enable-jemalloc"  
 fi
-AC_OUTPUT_SUBDIRS(js/src)
+AC_CONFIG_SUBDIRS(js/src)
 ac_configure_args="$_SUBDIR_CONFIG_ARGS"
 
 fi # COMPILE_ENVIRONMENT && !LIBXUL_SDK_DIR
--- mozilla/build/autoconf/altoptions.m4~	2009-03-26 22:38:57.000000000 +0200
+++ mozilla/build/autoconf/altoptions.m4	2009-07-29 01:34:11.680668351 +0300
@@ -146,9 +146,10 @@
 ])
 
 dnl MOZ_READ_MYCONFIG() - Read in 'myconfig.sh' file
-AC_DEFUN([MOZ_READ_MOZCONFIG],
+AC_DEFUN([[MOZ_READ_MOZCONFIG]],
 [AC_REQUIRE([AC_INIT_BINSH])dnl
 # Read in '.mozconfig' script to set the initial options.
 # See the mozconfig2configure script for more details.
 _AUTOCONF_TOOLS_DIR=`dirname [$]0`/[$1]/build/autoconf
-. $_AUTOCONF_TOOLS_DIR/mozconfig2configure])
+. $_AUTOCONF_TOOLS_DIR/mozconfig2configure
+])
--- mozilla/build/autoconf/nss.m4~	2009-03-26 22:38:57.000000000 +0200
+++ mozilla/build/autoconf/nss.m4	2009-07-29 01:57:50.473936834 +0300
@@ -5,7 +5,7 @@
 
 dnl AM_PATH_NSS([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
 dnl Test for NSS, and define NSS_CFLAGS and NSS_LIBS
-AC_DEFUN(AM_PATH_NSS,
+AC_DEFUN([AM_PATH_NSS],
 [dnl
 
 AC_ARG_WITH(nss-prefix,
